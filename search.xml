<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>小程序开发笔记</title>
      <link href="/2018/11/28/weapp/"/>
      <url>/2018/11/28/weapp/</url>
      <content type="html"><![CDATA[<h2 id="1-在小程序里如何关注公众号（公众号如何关联小程序）"><a href="#1-在小程序里如何关注公众号（公众号如何关联小程序）" class="headerlink" title="1.在小程序里如何关注公众号（公众号如何关联小程序）"></a>1.在小程序里如何关注公众号（公众号如何关联小程序）</h2><h4 id="首先你需要在公众号里给小程序发送一个关联邀请，如下图："><a href="#首先你需要在公众号里给小程序发送一个关联邀请，如下图：" class="headerlink" title="首先你需要在公众号里给小程序发送一个关联邀请，如下图："></a>首先你需要在公众号里给小程序发送一个关联邀请，如下图：</h4><p><img src="/2018/11/28/weapp/yaoqing.png" alt="你想输入的替代文字"><br><a id="more"></a></p><h4 id="发送之后小程序的管理员会在微信端收到一条邀请通知，点开消息之后点击确认就行，如下图："><a href="#发送之后小程序的管理员会在微信端收到一条邀请通知，点开消息之后点击确认就行，如下图：" class="headerlink" title="发送之后小程序的管理员会在微信端收到一条邀请通知，点开消息之后点击确认就行，如下图："></a>发送之后小程序的管理员会在微信端收到一条邀请通知，点开消息之后点击确认就行，如下图：</h4><p><img src="/2018/11/28/weapp/wechat.jpg" alt="你想输入的替代文字"></p><h4 id="上一步之后公众号关联小程序已经完成，接下来是如何在小程序里关注公众号，在小程序后台需要打开公众号关注组件的开关："><a href="#上一步之后公众号关联小程序已经完成，接下来是如何在小程序里关注公众号，在小程序后台需要打开公众号关注组件的开关：" class="headerlink" title="上一步之后公众号关联小程序已经完成，接下来是如何在小程序里关注公众号，在小程序后台需要打开公众号关注组件的开关："></a>上一步之后公众号关联小程序已经完成，接下来是如何在小程序里关注公众号，在小程序后台需要打开公众号关注组件的开关：</h4><p><img src="/2018/11/28/weapp/beiyaoqing.png" alt="你想输入的替代文字"></p><h4 id="直接在页面上使用这个组件即可-lt-official-account-gt-lt-official-account-gt-，效果如下："><a href="#直接在页面上使用这个组件即可-lt-official-account-gt-lt-official-account-gt-，效果如下：" class="headerlink" title="直接在页面上使用这个组件即可&lt;official-account&gt;&lt;/official-account&gt;，效果如下："></a>直接在页面上使用这个组件即可<code>&lt;official-account&gt;&lt;/official-account&gt;</code>，效果如下：</h4><p><img src="/2018/11/28/weapp/xiaoguo.jpg" alt="你想输入的替代文字"></p><h2 id="2-小程序的开发版和体验版"><a href="#2-小程序的开发版和体验版" class="headerlink" title="2.小程序的开发版和体验版"></a>2.小程序的开发版和体验版</h2><h3 id="开发版："><a href="#开发版：" class="headerlink" title="开发版："></a>开发版：</h3><p>扫描开发者工具里预览的二维码打开的小程序就是开发版，每次修改完代码之后需要点击预览生成一个新的二维码查看，用户需要在后台配置开发者权限；</p><h3 id="体验版："><a href="#体验版：" class="headerlink" title="体验版："></a>体验版：</h3><p>体验版相对于开发版的好处是只需扫描一个二维码，之后在最近使用中打开即可。修改了代码之后上传代码，也会自动覆盖之前的，不需要再次扫描二维码，方法如下：<br>首先需要在开发者工具里输入小程序的appid（创建项目的时候可以填，创建好的项目在详情里也可以修改）进行关联，接着上传代码：<br><img src="/2018/11/28/weapp/upload.png" alt="你想输入的替代文字"><br>上传成功之后在小程序后台的开发管理就能看到上传记录，点击选为体验版本：<br><img src="/2018/11/28/weapp/tiyan.png" alt="你想输入的替代文字"><br>用户需要在后台配置体验者权限，扫描体验版二维码即可。</p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>记录一些零散的知识点</title>
      <link href="/2018/08/06/notes/"/>
      <url>/2018/08/06/notes/</url>
      <content type="html"><![CDATA[<h3 id="1、JS的for-in循环可以用来遍历对象，用在取用对象中不确定的属性名。"><a href="#1、JS的for-in循环可以用来遍历对象，用在取用对象中不确定的属性名。" class="headerlink" title="1、JS的for in循环可以用来遍历对象，用在取用对象中不确定的属性名。"></a>1、JS的for in循环可以用来遍历对象，用在取用对象中不确定的属性名。</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">fname</span>:<span class="string">"John"</span>, <span class="attr">lname</span>:<span class="string">"Doe"</span>, <span class="attr">age</span>:<span class="number">25</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> text = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(text += person[key] + <span class="string">" "</span>);<span class="comment">//John Doe 25</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、JS中substring与substr的区别"><a href="#2、JS中substring与substr的区别" class="headerlink" title="2、JS中substring与substr的区别"></a>2、JS中substring与substr的区别</h3><h4 id="共同点是都有两个参数，第一个参数的含义都一样，区别是第二个参数：substring为截取到第几位，substr是截取几位，如下："><a href="#共同点是都有两个参数，第一个参数的含义都一样，区别是第二个参数：substring为截取到第几位，substr是截取几位，如下：" class="headerlink" title="共同点是都有两个参数，第一个参数的含义都一样，区别是第二个参数：substring为截取到第几位，substr是截取几位，如下："></a>共同点是都有两个参数，第一个参数的含义都一样，区别是第二个参数：substring为截取到第几位，substr是截取几位，如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">"hello world"</span>;</span><br><span class="line">text.substr(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//el</span></span><br><span class="line">text.substring(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//e</span></span><br></pre></td></tr></table></figure><h3 id="3、Navigator对象的platform和userAgent区别"><a href="#3、Navigator对象的platform和userAgent区别" class="headerlink" title="3、Navigator对象的platform和userAgent区别"></a>3、Navigator对象的platform和userAgent区别</h3><h4 id="platform用于判断操作系统平台，例如："><a href="#platform用于判断操作系统平台，例如：" class="headerlink" title="platform用于判断操作系统平台，例如："></a>platform用于判断操作系统平台，例如：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> platform = navigator.platform.substr(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (platform === <span class="string">"Win"</span>) &#123;</span><br><span class="line">    <span class="comment">//windows</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (platform === <span class="string">"Mac"</span>) &#123;</span><br><span class="line">    <span class="comment">//macOS</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="UserAgent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，UserAgent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识，一般用于区分用户浏览器的类型及版本，例如："><a href="#UserAgent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，UserAgent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识，一般用于区分用户浏览器的类型及版本，例如：" class="headerlink" title="UserAgent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，UserAgent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识，一般用于区分用户浏览器的类型及版本，例如："></a>UserAgent中文名为用户代理，是Http协议中的一部分，属于头域的组成部分，UserAgent也简称UA。它是一个特殊字符串头，是一种向访问网站提供你所使用的浏览器类型及版本、操作系统及版本、浏览器内核、等信息的标识，一般用于区分用户浏览器的类型及版本，例如：</h4><p>//判断IE浏览器版本<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IEVersion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> userAgent = navigator.userAgent; <span class="comment">//取得浏览器的userAgent字符串  </span></span><br><span class="line">    <span class="keyword">var</span> isIE = userAgent.indexOf(<span class="string">"compatible"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span>; <span class="comment">//判断是否IE&lt;11浏览器  </span></span><br><span class="line">    <span class="keyword">var</span> isEdge = userAgent.indexOf(<span class="string">"Edge"</span>) &gt; <span class="number">-1</span> &amp;&amp; !isIE; <span class="comment">//判断是否IE的Edge浏览器  </span></span><br><span class="line">    <span class="keyword">var</span> isIE11 = userAgent.indexOf(<span class="string">'Trident'</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"rv:11.0"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (isIE) &#123;</span><br><span class="line">        <span class="keyword">var</span> reIE = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"MSIE (\\d+\\.\\d+);"</span>);</span><br><span class="line">        reIE.test(userAgent);</span><br><span class="line">        <span class="keyword">var</span> fIEVersion = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]);</span><br><span class="line">        <span class="keyword">if</span> (fIEVersion == <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fIEVersion == <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">6</span>;<span class="comment">//IE版本&lt;=7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isEdge) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'edge'</span>;<span class="comment">//edge</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isIE11) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>; <span class="comment">//IE11  </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//不是ie浏览器</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>//区分微信和qq<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">if</span> (ua.indexOf(<span class="string">"micromessenger"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//微信</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ua.indexOf(<span class="string">"qq"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//QQ</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="4、number-toLocaleString"><a href="#4、number-toLocaleString" class="headerlink" title="4、number.toLocaleString()"></a>4、number.toLocaleString()</h3><h4 id="toLocaleString-方法可把一个-Number-对象转换为本地格式的字符串，常用于数值转化成千分位，如下："><a href="#toLocaleString-方法可把一个-Number-对象转换为本地格式的字符串，常用于数值转化成千分位，如下：" class="headerlink" title="toLocaleString() 方法可把一个 Number 对象转换为本地格式的字符串，常用于数值转化成千分位，如下："></a>toLocaleString() 方法可把一个 Number 对象转换为本地格式的字符串，常用于数值转化成千分位，如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1231231231</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.toLocaleString());<span class="comment">//1,231,231,231</span></span><br></pre></td></tr></table></figure><h3 id="5、P标签中不能嵌套块级标签"><a href="#5、P标签中不能嵌套块级标签" class="headerlink" title="5、P标签中不能嵌套块级标签"></a>5、P标签中不能嵌套块级标签</h3>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js html css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js中的Map和Set</title>
      <link href="/2018/07/25/mapset/"/>
      <url>/2018/07/25/mapset/</url>
      <content type="html"><![CDATA[<h2 id="1-Map"><a href="#1-Map" class="headerlink" title="1.Map"></a>1.Map</h2><h4 id="Map是一组键值对的结构，具有极快的查找速度，如下："><a href="#Map是一组键值对的结构，具有极快的查找速度，如下：" class="headerlink" title="Map是一组键值对的结构，具有极快的查找速度，如下："></a>Map是一组键值对的结构，具有极快的查找速度，如下：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="built_in">Map</span>(); <span class="comment">// 创建一个空Map</span></span><br><span class="line"><span class="comment">//也可以像这样创建：var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]]);</span></span><br><span class="line">m.set(<span class="string">'leo'</span>, <span class="number">25</span>); <span class="comment">// 添加新的key-value</span></span><br><span class="line">m.set(<span class="string">'Bob'</span>, <span class="number">30</span>);</span><br><span class="line">m.set(<span class="number">10</span>, <span class="string">"john"</span>);</span><br><span class="line">m.has(<span class="string">'leo'</span>); <span class="comment">// 是否存在key 'Adam': true</span></span><br><span class="line">m.get(<span class="string">'leo'</span>); <span class="comment">// 25</span></span><br><span class="line">m.delete(<span class="string">'leo'</span>); <span class="comment">// 删除key 'leo'</span></span><br><span class="line">m.get(<span class="string">'leo'</span>); <span class="comment">// undefined</span></span><br><span class="line">m.size;<span class="comment">// 获取map的长度：2</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="由于一个key只能对应一个value，所以，多次对一个key放入value，后面的value会把之前的覆盖："><a href="#由于一个key只能对应一个value，所以，多次对一个key放入value，后面的value会把之前的覆盖：" class="headerlink" title="由于一个key只能对应一个value，所以，多次对一个key放入value，后面的value会把之前的覆盖："></a>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的value会把之前的覆盖：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">m.set(<span class="string">'Bob'</span>, <span class="number">300</span>);</span><br><span class="line">m.get(<span class="string">'Bob'</span>); <span class="comment">// 300</span></span><br></pre></td></tr></table></figure><h4 id="在Map中，key值可以是任何基本类型-String-Number-Boolean-undefined-NaN…-，或者对象-Map-Set-Object-Function-Symbol-null…"><a href="#在Map中，key值可以是任何基本类型-String-Number-Boolean-undefined-NaN…-，或者对象-Map-Set-Object-Function-Symbol-null…" class="headerlink" title="在Map中，key值可以是任何基本类型(String, Number, Boolean, undefined, NaN….)，或者对象(Map, Set, Object, Function , Symbol , null…)"></a>在Map中，key值可以是任何基本类型(String, Number, Boolean, undefined, NaN….)，或者对象(Map, Set, Object, Function , Symbol , null…)</h4><h2 id="2-Set"><a href="#2-Set" class="headerlink" title="2.Set"></a>2.Set</h2><h4 id="Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key"><a href="#Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key" class="headerlink" title="Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key"></a>Set和Map类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在Set中，没有重复的key</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>(); <span class="comment">// 创建一个空Set</span></span><br><span class="line"><span class="comment">//也可以像这样创建：var s2 = new Set([1, 2, 3]);</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'3'</span>]);<span class="comment">//重复元素在Set中自动被过滤：&#123;1, 2, 3, "3"&#125;</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">Set</span>();<span class="comment">//&#123;&#125;</span></span><br><span class="line">s.add(<span class="number">10</span>);<span class="comment">//添加元素</span></span><br><span class="line">s.add(<span class="number">100</span>);</span><br><span class="line">s.add(<span class="string">"10"</span>);<span class="comment">//&#123;10, 100, "10"&#125;</span></span><br><span class="line">s.delete(<span class="number">10</span>);<span class="comment">//删除：&#123;100, "10"&#125;</span></span><br><span class="line">s.size;<span class="comment">//获取长度：2</span></span><br></pre></td></tr></table></figure><h4 id="在Set中，key值可以是任何基本类型-String-Number-Boolean-undefined-NaN…-，或者对象-Map-Set-Object-Function-Symbol-null…"><a href="#在Set中，key值可以是任何基本类型-String-Number-Boolean-undefined-NaN…-，或者对象-Map-Set-Object-Function-Symbol-null…" class="headerlink" title="在Set中，key值可以是任何基本类型(String, Number, Boolean, undefined, NaN….)，或者对象(Map, Set, Object, Function , Symbol , null…)"></a>在Set中，key值可以是任何基本类型(String, Number, Boolean, undefined, NaN….)，或者对象(Map, Set, Object, Function , Symbol , null…)</h4>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>react如何在组件外部调用组件内的方法</title>
      <link href="/2018/07/04/reactTechnology/"/>
      <url>/2018/07/04/reactTechnology/</url>
      <content type="html"><![CDATA[<h4 id="在开发中，难免会遇到这种场景：我们需要在组件外部调用组件内的方法，从而达到在外部操作组件或者获取组件内部数据的目的。"><a href="#在开发中，难免会遇到这种场景：我们需要在组件外部调用组件内的方法，从而达到在外部操作组件或者获取组件内部数据的目的。" class="headerlink" title="在开发中，难免会遇到这种场景：我们需要在组件外部调用组件内的方法，从而达到在外部操作组件或者获取组件内部数据的目的。"></a>在开发中，难免会遇到这种场景：我们需要在组件外部调用组件内的方法，从而达到在外部操作组件或者获取组件内部数据的目的。</h4><h4 id="示例代码如下："><a href="#示例代码如下：" class="headerlink" title="示例代码如下："></a>示例代码如下：</h4><a id="more"></a><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外层组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Parent <span class="keyword">extends</span> React.Component&lt;&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class="line">    <span class="comment">//用一个变量接收子组件的this</span></span><br><span class="line">    <span class="keyword">public</span> child: <span class="built_in">any</span>;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//绑定子组件的this到this.child</span></span><br><span class="line">    bindChild = <span class="function">(<span class="params">ref:<span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.child = ref;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用于调用子组件的方法</span></span><br><span class="line">    click = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.child.myName()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">            &lt;Child bindChild=&#123;<span class="keyword">this</span>.bindChild&#125; /&gt;</span><br><span class="line">            &lt;button onClick=&#123;<span class="keyword">this</span>.click&#125; &gt;getName&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line"><span class="keyword">interface</span> ChildOwnProps &#123;</span><br><span class="line">    bindChild: <span class="built_in">Function</span>;<span class="comment">//提供一个属性，用于把this传递给外部组件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Child <span class="keyword">extends</span> React.Component&lt;ChildOwnProps&gt; &#123;</span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">props:ChildOwnProps</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount()&#123;</span><br><span class="line">        <span class="comment">//传递this</span></span><br><span class="line">        <span class="keyword">this</span>.props.bindChild(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//供外部调用的方法</span></span><br><span class="line">    myName = <span class="function"><span class="params">()</span> =&gt;</span> alert(<span class="string">'xiaohesong'</span>)</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;div&gt;child&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="其实原理很简单，即子组件向外提供一个属性，用于把自己的this传递给外部组件，外部组件用一个变量接收子组件传递过来的this之后就可以随意调用子组件内部的方法。"><a href="#其实原理很简单，即子组件向外提供一个属性，用于把自己的this传递给外部组件，外部组件用一个变量接收子组件传递过来的this之后就可以随意调用子组件内部的方法。" class="headerlink" title="其实原理很简单，即子组件向外提供一个属性，用于把自己的this传递给外部组件，外部组件用一个变量接收子组件传递过来的this之后就可以随意调用子组件内部的方法。"></a>其实原理很简单，即子组件向外提供一个属性，用于把自己的this传递给外部组件，外部组件用一个变量接收子组件传递过来的this之后就可以随意调用子组件内部的方法。</h4>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>更新cordova时出现的报错及解决方案</title>
      <link href="/2018/06/08/cordovaUpdate/"/>
      <url>/2018/06/08/cordovaUpdate/</url>
      <content type="html"><![CDATA[<h4 id="今天在利用cordova-build安卓apk的时候出现了报错，并且提示更新cordova，于是执行以下命令做更新："><a href="#今天在利用cordova-build安卓apk的时候出现了报错，并且提示更新cordova，于是执行以下命令做更新：" class="headerlink" title="今天在利用cordova build安卓apk的时候出现了报错，并且提示更新cordova，于是执行以下命令做更新："></a>今天在利用cordova build安卓apk的时候出现了报错，并且提示更新cordova，于是执行以下命令做更新：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure><p>结果出现了报错，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm WARN update-linked node_modules\cordova needs updating to 8.0.0 from 6.4.0 but we can&apos;t, as it&apos;s a symlink</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>在网上查了半天也没找到原因，于是尝试了先去remove再install，结果成功了，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm remove -g cordova</span><br><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure></p><p>至于报错的原因，还有待后面研究下…</p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何通过url跳转到微信公众号关注页</title>
      <link href="/2018/05/24/wechatFollow/"/>
      <url>/2018/05/24/wechatFollow/</url>
      <content type="html"><![CDATA[<h2 id="微信端"><a href="#微信端" class="headerlink" title="微信端"></a>微信端</h2><h4 id="微信端实现相对比较简单，首先需要获取公众号关注页的url，步骤如下："><a href="#微信端实现相对比较简单，首先需要获取公众号关注页的url，步骤如下：" class="headerlink" title="微信端实现相对比较简单，首先需要获取公众号关注页的url，步骤如下："></a>微信端实现相对比较简单，首先需要获取公众号关注页的url，步骤如下：</h4><p>1.点击公众号的历史消息<br><img src="/2018/05/24/wechatFollow/wechat_history.jpg" alt="你想输入的替代文字"><br><a id="more"></a><br>2.复制链接<br><img src="/2018/05/24/wechatFollow/wechat_copy_url.jpg" alt="你想输入的替代文字"><br>3.接下来在微信里直接跳转这个链接即可<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href=<span class="string">"https://mp.weixin.qq.com/mp/profile_ext?action=home&amp;__biz=MzAxNjU0MjEyNA==&amp;scene=123&amp;from=singlemessage&amp;isappinstalled=0#wechat_redirect"</span></span><br></pre></td></tr></table></figure></p><h2 id="手机QQ"><a href="#手机QQ" class="headerlink" title="手机QQ"></a>手机QQ</h2><p>直接跳转这个链接即可唤起微信：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.location.href = <span class="string">'weixin://'</span>;</span><br></pre></td></tr></table></figure></p><p>但是不能在QQ里跳转微信的那个链接，如下图<br><img src="/2018/05/24/wechatFollow/qq_error.png" alt="你想输入的替代文字"></p><h2 id="平台的判断"><a href="#平台的判断" class="headerlink" title="平台的判断"></a>平台的判断</h2><p>这里用的到是userAgent，代码如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ua = navigator.userAgent.toLowerCase();</span><br><span class="line"><span class="keyword">if</span> (ua.indexOf(<span class="string">"micromessenger"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//微信端</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (ua.indexOf(<span class="string">"qq"</span>) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="comment">//手机qq</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js promise简例及一些注意点</title>
      <link href="/2018/05/11/jsPromise/"/>
      <url>/2018/05/11/jsPromise/</url>
      <content type="html"><![CDATA[<h4 id="无论promise中的执行结果是什么，它总会给你返回一个状态，成功或者失败"><a href="#无论promise中的执行结果是什么，它总会给你返回一个状态，成功或者失败" class="headerlink" title="无论promise中的执行结果是什么，它总会给你返回一个状态，成功或者失败"></a>无论promise中的执行结果是什么，它总会给你返回一个状态，成功或者失败</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">        req.open(<span class="string">'GET'</span>, URL, <span class="literal">true</span>);</span><br><span class="line">        req.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (req.status === <span class="number">200</span>) &#123;</span><br><span class="line">                resolve(req.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        req.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            reject(<span class="keyword">new</span> <span class="built_in">Error</span>(req.statusText));</span><br><span class="line">        &#125;;</span><br><span class="line">        req.send();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">var</span> URL = <span class="string">"http:***"</span>;</span><br><span class="line">getURL(URL).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//也可以这样写</span></span><br><span class="line"><span class="comment">//getURL(URL).then(function(value) &#123;</span></span><br><span class="line"><span class="comment">//    console.log(value);</span></span><br><span class="line"><span class="comment">//&#125;, function(error)&#123;</span></span><br><span class="line"><span class="comment">//    console.error(error);</span></span><br><span class="line"><span class="comment">//&#125;)</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="在angularjs中可以通过-q实现异步操作："><a href="#在angularjs中可以通过-q实现异步操作：" class="headerlink" title="在angularjs中可以通过$q实现异步操作："></a>在angularjs中可以通过$q实现异步操作：</h4><p>通过调用  $q.defer() 可以构建一个新的 deffered 实例,deffered 对象用来将 Promise 实例与 标记任务状态(执行成功还是不成功)的 API 相关联，<br>deffered 对象的方法</p><blockquote><ul><li>resolve(value) ——成功，如果 value 是一个通过 $q.reject 构造的拒绝对象(rejection) , 该promise 将被拒绝。</li><li>reject(reason) ——失败，这相当于通过 $q.reject构造的拒绝对象(rejection)作为参数传递给 resolve。</li><li>notify(value)  ——在 promise 执行的过程中提供状态更新。 这在 promise 被解决或拒绝之前可能会被多次调用。</li></ul></blockquote><p>例子如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//封装promise</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">asyncGreet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> deferred = $q.defer();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        deferred.notify(<span class="string">'即将问候 '</span> + name + <span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">if</span> (okToGreet(name)) &#123;</span><br><span class="line">            deferred.resolve(<span class="string">'你好, '</span> + name + <span class="string">'!'</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            deferred.reject(<span class="string">'拒绝问候 '</span> + name + <span class="string">' .'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">return</span> deferred.promise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line"><span class="keyword">var</span> promise = asyncGreet(<span class="string">'***'</span>);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">update</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>20180504随笔</title>
      <link href="/2018/05/04/20180504Essay/"/>
      <url>/2018/05/04/20180504Essay/</url>
      <content type="html"><![CDATA[<h3 id="3月份的时候了解到了Hexo，感觉还是挺有意思的，主要是很多东西需要自己折腾，而且比博客园要好看很多，就折腾了下；"><a href="#3月份的时候了解到了Hexo，感觉还是挺有意思的，主要是很多东西需要自己折腾，而且比博客园要好看很多，就折腾了下；" class="headerlink" title="3月份的时候了解到了Hexo，感觉还是挺有意思的，主要是很多东西需要自己折腾，而且比博客园要好看很多，就折腾了下；"></a>3月份的时候了解到了Hexo，感觉还是挺有意思的，主要是很多东西需要自己折腾，而且比博客园要好看很多，就折腾了下；</h3><a id="more"></a><h3 id="其实很久都不更新博客了，3月至5月这个项目确实也没啥要记的，都是业务逻辑，也可能是自己越来越懒了，以后要养成好习惯，不论是知识点，难点还是开发中的报错，都要记录一下；"><a href="#其实很久都不更新博客了，3月至5月这个项目确实也没啥要记的，都是业务逻辑，也可能是自己越来越懒了，以后要养成好习惯，不论是知识点，难点还是开发中的报错，都要记录一下；" class="headerlink" title="其实很久都不更新博客了，3月至5月这个项目确实也没啥要记的，都是业务逻辑，也可能是自己越来越懒了，以后要养成好习惯，不论是知识点，难点还是开发中的报错，都要记录一下；"></a>其实很久都不更新博客了，3月至5月这个项目确实也没啥要记的，都是业务逻辑，也可能是自己越来越懒了，以后要养成好习惯，不论是知识点，难点还是开发中的报错，都要记录一下；</h3><h3 id="得抓紧时间落实一下FD的事情；"><a href="#得抓紧时间落实一下FD的事情；" class="headerlink" title="得抓紧时间落实一下FD的事情；"></a>得抓紧时间落实一下FD的事情；</h3><h3 id="没事就练练车，提高下车技；"><a href="#没事就练练车，提高下车技；" class="headerlink" title="没事就练练车，提高下车技；"></a>没事就练练车，提高下车技；</h3>]]></content>
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Life </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React的Ref属性在TypeScript中的写法</title>
      <link href="/2018/05/04/reactRefs/"/>
      <url>/2018/05/04/reactRefs/</url>
      <content type="html"><![CDATA[<h4 id="在TypeScript中使用ref属性的时候，如果不定义它的类型直接去使用this-refs-XXX，就会在编译的时候报错。参考如下代码："><a href="#在TypeScript中使用ref属性的时候，如果不定义它的类型直接去使用this-refs-XXX，就会在编译的时候报错。参考如下代码：" class="headerlink" title="在TypeScript中使用ref属性的时候，如果不定义它的类型直接去使用this.refs.XXX，就会在编译的时候报错。参考如下代码："></a>在TypeScript中使用ref属性的时候，如果不定义它的类型直接去使用this.refs.XXX，就会在编译的时候报错。参考如下代码：</h4><a id="more"></a><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> CustomTextInput <span class="keyword">extends</span> React.Component&lt;&#123;&#125;, &#123;&#125;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在此处统一定义refs</span></span><br><span class="line">    <span class="keyword">public</span> refs: &#123;</span><br><span class="line">        textInput: HTMLInputElement,</span><br><span class="line">        loadMoreDiv: HTMLElement</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="keyword">const</span> loadMore = <span class="keyword">this</span>.refs.loadMoreDiv;</span><br><span class="line">        <span class="keyword">const</span> myInput = <span class="keyword">this</span>.refs.textInput;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> render() &#123;</span><br><span class="line">        <span class="keyword">return</span> &lt;div&gt;</span><br><span class="line">            &lt;input <span class="keyword">type</span>=<span class="string">"text"</span> ref= <span class="string">"textInput"</span> /&gt;</span><br><span class="line">            &lt;div ref= <span class="string">"loadMoreDiv"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>转自：<a href="https://goenning.net/2016/11/02/strongly-typed-react-refs-with-typescript/" target="_blank" rel="noopener">Strongly Typed React Refs with TypeScript</a></p>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo使用小记</title>
      <link href="/2018/05/04/Hexo/"/>
      <url>/2018/05/04/Hexo/</url>
      <content type="html"><![CDATA[<h3 id="1-关于部署到github时用户名密码报错的问题"><a href="#1-关于部署到github时用户名密码报错的问题" class="headerlink" title="1.  关于部署到github时用户名密码报错的问题"></a>1.  关于部署到github时用户名密码报错的问题</h3><p>刚开始部署的配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:   </span><br><span class="line">    type: git   </span><br><span class="line">    repo: https://github.com/&#123;yourname&#125;/&#123;yourname&#125;.github.io.git   </span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></p><p>结果会报没有用户名密码的错误，大致如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fatal: could not read Username for &apos;GitHub · Where software is built&apos;: No error</span><br><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: Troubleshooting</span><br><span class="line">Error: bash: /dev/tty: No such device or address</span><br><span class="line">error: failed to execute prompt script (exit code 1)</span><br><span class="line">fatal: could not read Username for &apos;GitHub · Where software is built&apos;: No erro</span><br></pre></td></tr></table></figure></p><p>解决办法为修改配置为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:    </span><br><span class="line">    type: git   </span><br><span class="line">    repo: https://&#123;yourname&#125;:&#123;yourpassword&#125;@github.com/&#123;yourname&#125;/&#123;yourname&#125;.github.io.git</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure></p><p>转自：<a href="https://www.zhihu.com/question/38219432" target="_blank" rel="noopener">有关使用 Hexo 和 GitHub 搭建博客，出现 hexo -d 报错如何解决？</a></p><h3 id="2-配置文件一定要指明language"><a href="#2-配置文件一定要指明language" class="headerlink" title="2.  配置文件一定要指明language"></a>2.  配置文件一定要指明language</h3><a id="more"></a><h3 id="3-集成disqus评论功能"><a href="#3-集成disqus评论功能" class="headerlink" title="3.  集成disqus评论功能"></a>3.  集成disqus评论功能</h3><p>进入disqus官网，点击红色框中链接，给自己的网站添加disqus，如下图<br><img src="/2018/05/04/Hexo/disqus_create_new.png" alt="你想输入的替代文字"><br>接着输入你的网址，选择类别，生成shortname<br><img src="/2018/05/04/Hexo/disqus_form.png" alt="你想输入的替代文字"><br>拿到shortname，分别添加到站点配置文件的disqus_shortname和主题配置文件的disqus中的shortname，并且将主题配置文件disqus的enable设为true</p><h3 id="4-如何给文章的md文件中插入图片"><a href="#4-如何给文章的md文件中插入图片" class="headerlink" title="4.  如何给文章的md文件中插入图片"></a>4.  如何给文章的md文件中插入图片</h3><p>把站点配置文件的post_asset_folder设置为true；</p><p>接着执行命令，来自<a href="https://github.com/CodeFalling/hexo-asset-image" target="_blank" rel="noopener">hexo-asset-image</a>；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></p><p>安装好之后，在用<code>hexo n xxx</code>创建新文档的时候，/source/_posts文件夹内除了xxx.md文件还会有一个同名的文件夹，这个文件夹就是用来存放图片的；</p><p>最后在xxx.md中想引入图片时先，先把图片复制到xxx文件夹中，接下来直接在xxx.md中按照markdown的格式引入图片：<code>![你想输入的替代文字](xxxx/图片名.jpg)</code>即可</p><p>转自：<a href="https://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener">hexo生成博文插入图片</a></p><h3 id="5-设置阅读全文"><a href="#5-设置阅读全文" class="headerlink" title="5.  设置阅读全文"></a>5.  设置阅读全文</h3><p>根据文章的内容，自己在合适的位置添加 &lt;!–more–&gt;标签，使用灵活，也是Hexo推荐的方法</p><h3 id="6-使用local-search为站点增加搜索功能"><a href="#6-使用local-search为站点增加搜索功能" class="headerlink" title="6.  使用local_search为站点增加搜索功能"></a>6.  使用local_search为站点增加搜索功能</h3><p>安装 hexo-generator-search，在站点的根目录下执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure></p><p>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></p><p>编辑 站点配置文件，新增以下内容到任意位置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></p><p>修改主题配置文件中local_search的enable为true即可</p><p>转自：<a href="https://blog.csdn.net/qq_40265501/article/details/80030627" target="_blank" rel="noopener">hexo博客添加搜索功能</a></p><h3 id="持续补充中。。。"><a href="#持续补充中。。。" class="headerlink" title="持续补充中。。。"></a>持续补充中。。。</h3>]]></content>
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
